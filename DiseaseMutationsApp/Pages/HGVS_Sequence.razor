@page "/hgvs_sequence"

@using gRNA

<PageTitle>HGVS Sequence</PageTitle>

<h1>Disease Mutations App</h1>

<div style="height: 10rem; padding: 1rem 0;">
    <table>
        <tr>
            <td>
                <label for="hgvs">HGVS:</label>
            </td>
            <td>
                <input id="hgvs" @bind="hgvs" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="before">gRNA size:</label>
            </td>
            <td>
                <input id="before" type="number" @bind="gRNASize" />
            </td>
        </tr>
    </table>
</div>
<button class="btn btn-primary" style="font-size: 16px;" @onclick="FetchData">Fetch Data</button>

@if (original != null && mutated != null)
{
    <h3>Original Sequence:</h3>
    <p>@((MarkupString)original)</p>
    <h3>Mutated Sequence:</h3>
    <p>@((MarkupString)mutated)</p>
    
    <br/>
    
    <div>
    @if (gRNAs != null && gRNAs.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>gRNA Spacer</th>
                    <th>GC Score (how close to range 40%-60%)</th>
                    <th>Homopolymer Count</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tuple in gRNAs)
                {
                    <tr>
                        <td>@tuple.Item1</td>
                        <td>@tuple.Item2</td>
                        <td>@tuple.Item3</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
}

@code {
    private string? hgvs;
    private int gRNASize = 28;
    private string? original;
    private string? mutated;
    private List<Tuple<string, double, int, string>>? gRNAs;

    private async Task FetchData()
    {
        if (!string.IsNullOrWhiteSpace(hgvs) && gRNASize > 0)
        {
            var hgvsObj = new HGVS(hgvs);
            var sequence = await SequenceRepository.GetSequence(hgvsObj.Accession);
            var extraNucleotids = gRNASize - hgvsObj.GetMutationLength();
            
            
            (mutated, original) = sequence.GetMutatedSubsequence(hgvsObj, extraNucleotids, extraNucleotids);

            gRNAs = SpacerFinder.getBestgRNA(28, mutated).ToList();

            
            Console.WriteLine($"original size: {original.Length}, mutated size: {mutated.Length}, left: {extraNucleotids}, right: {extraNucleotids}");
            original = original.Insert(extraNucleotids, "<b>");
            original = original.Insert(original.Length - extraNucleotids, "</b>");
            mutated = mutated.Insert(extraNucleotids, "<b>");
            mutated = mutated.Insert(mutated.Length - extraNucleotids, "</b>");
            
            
        }
        else
        {
            original = "Invalid input. Please check the values.";
            mutated = "";
        }
    }
}