@page "/hgvs_sequence"

<PageTitle>HGVS Sequence</PageTitle>

<h1>Disease Mutations App</h1>

<div style="height: 10rem; padding: 1rem 0;">
    <table>
        <tr>
            <td>
                <label for="hgvs">HGVS:</label>
            </td>
            <td>
                <input id="hgvs" @bind="hgvs" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="before">Nucleotides Before:</label>
            </td>
            <td>
                <input id="before" type="number" @bind="nucleotidesBefore" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="after">Nucleotides After:</label>
            </td>
            <td>
                <input id="after" type="number" @bind="nucleotidesAfter" />
            </td>
        </tr>
    </table>
</div>
<button class="btn btn-primary" style="font-size: 16px;" @onclick="FetchData">Fetch Data</button>

@if (original != null && mutated != null)
{
    <h3>Original Sequence:</h3>
    <p>@((MarkupString)original)</p>
    <h3>Mutated Sequence:</h3>
    <p>@((MarkupString)mutated)</p>
}

@code {
    private string? hgvs;
    private int nucleotidesBefore;
    private int nucleotidesAfter;
    private string? original;
    private string? mutated;

    private async Task FetchData()
    {
        if (!string.IsNullOrWhiteSpace(hgvs) && nucleotidesBefore >= 0 && nucleotidesAfter >= 0)
        {
            var hgvsObj = new HGVS(hgvs);
            var sequence = await SequenceRepository.GetSequence(hgvsObj.Accession);
            (mutated, original) = sequence.GetMutatedSubsequence(hgvsObj, nucleotidesBefore, nucleotidesAfter);
            //bold original mutation position
            // int mutationIndex = original.IndexOf(hgvsObj.GetReferenceSequence());
            // if (mutationIndex >= 0)m
            // {
            //     original = original.Insert(mutationIndex + hgvsObj.GetReferenceSequence().Length, "</b>")
            //                        .Insert(mutationIndex, "<b>");
            // }
            Console.WriteLine($"original size: {original.Length}, mutated size: {mutated.Length}, left: {nucleotidesBefore}, right: {nucleotidesAfter}");
            original = original.Insert(nucleotidesBefore, "<b>");
            original = original.Insert(original.Length - nucleotidesAfter, "</b>");
            mutated = mutated.Insert(nucleotidesBefore, "<b>");
            mutated = mutated.Insert(mutated.Length - nucleotidesAfter, "</b>");
        }
        else
        {
            original = "Invalid input. Please check the values.";
            mutated = "";
        }
    }
}